buildscript {
    ext.kotlin_repository = {
        if (kotlin_version.endsWith('-SNAPSHOT')) return 'https://oss.sonatype.org/content/repositories/snapshots'
        return 'http://dl.bintray.com/kotlin/kotlin-dev'
    }()

    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url kotlin_repository }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath 'net.researchgate:gradle-release:2.4.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_version"
    }
}

apply plugin: 'net.researchgate.release'

ext.configuredVersion = project.hasProperty('releaseVersion') ? project.releaseVersion : project.version
ext.dokkaExcludes = [
        'ktor-server',
        'ktor-samples',
        'ktor-features',
        'ktor-client'
]

ext.globalM2 = "$buildDir/m2"
ext.publishLocal = project.hasProperty('publishLocal')

apply from: 'gradle/platform.gradle'

allprojects {
    def platform = platformOf(project)

    group = 'io.ktor'
    version = configuredVersion

    repositories {
//        mavenLocal()
        maven { url 'https://dl.bintray.com/kotlin/kotlinx/' }
        maven { url kotlin_repository }
        jcenter()
    }

    apply plugin: 'maven'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: "kotlin-platform-${platform}"

    apply from: rootProject.file("gradle/${platform}.gradle")
    apply from: rootProject.file('gradle/publish.gradle')

    task sourceJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        if (platform != 'native') {
            from sourceSets.main.kotlin
            duplicatesStrategy DuplicatesStrategy.EXCLUDE
            def platformSrc = sourceSets.main.allSource
            def commonSrc = rootProject.sourceSets.main.allSource
            from(platformSrc + commonSrc)
        }
    }

    task emptyJar(type: Jar) {
        classifier 'javadoc'
    }

    tasks.build.dependsOn(['sourceJar', 'emptyJar'])

    kotlin.experimental.coroutines 'enable'
}

release {
    scmAdapters = [net.researchgate.release.GitAdapter]
    git {
        requireBranch = 'gradle-build'
    }
}

afterReleaseBuild.dependsOn bintrayUpload
